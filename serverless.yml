# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!
service: walk-the-world-backend
provider:
  name: aws
  runtime: rust
  memorySize: 128
  stage: dev
  region: eu-west-1

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [WalkTheWorldTable, Arn]

  # you can define service wide environment variables here
  environment:
    TABLE_NAME: ${self:custom.TABLE_NAME}

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  STAGE: ${opt:stage, self:provider.stage}
  TABLE_NAME: ${self:custom.STAGE}-walk-the-world
  USER_POOL_NAME: ${self:custom.STAGE}-walk-the-world-user-pool

package:
  individually: true

plugins:
  - serverless-rust

functions:
  steps:
    # handler value syntax is `{cargo-package-name}.{bin-name}`
    # or `{cargo-package-name}` for short when you are building a
    # default bin for a given package.
    handler: steps
    events:
      - http:
          path: steps
          method: post
          cors: true
          authorizer: aws_iam
          request:
            schema:
              application/json: ${file(validate_adding_steps.json)}
  total:
    handler: total
    events:
      - http:
          path: steps
          cors: true
          method: get

  preSignUpCheck:
    handler: pre_sign_up_check
    events:
      - cognitoUserPool:
          pool: ${self:custom.USER_POOL_NAME}
          trigger: PreSignUp
          existing: true

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
